// <auto-generated />
using System;
using BeltReview.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeltReview.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BeltReview.Models.Sighting", b =>
                {
                    b.Property<int>("SightingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sighting_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SightingId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("FoundDate")
                        .HasColumnType("Date")
                        .HasColumnName("found_date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("location");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("SightingId")
                        .HasName("pk_sightings");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_sightings_owner_id");

                    b.ToTable("sightings", (string)null);
                });

            modelBuilder.Entity("BeltReview.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BeltReview.Models.UserSightingBeliever", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SightingId")
                        .HasColumnType("int")
                        .HasColumnName("sighting_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_sighting_believers");

                    b.HasIndex("SightingId")
                        .HasDatabaseName("ix_user_sighting_believers_sighting_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_sighting_believers_user_id");

                    b.ToTable("user_sighting_believers", (string)null);
                });

            modelBuilder.Entity("BeltReview.Models.Sighting", b =>
                {
                    b.HasOne("BeltReview.Models.User", "Owner")
                        .WithMany("OwnedSightings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sightings_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BeltReview.Models.UserSightingBeliever", b =>
                {
                    b.HasOne("BeltReview.Models.Sighting", "Sighting")
                        .WithMany("Believers")
                        .HasForeignKey("SightingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sighting_believers_sightings_sighting_id");

                    b.HasOne("BeltReview.Models.User", "User")
                        .WithMany("Believers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sighting_believers_users_user_id");

                    b.Navigation("Sighting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeltReview.Models.Sighting", b =>
                {
                    b.Navigation("Believers");
                });

            modelBuilder.Entity("BeltReview.Models.User", b =>
                {
                    b.Navigation("Believers");

                    b.Navigation("OwnedSightings");
                });
#pragma warning restore 612, 618
        }
    }
}
